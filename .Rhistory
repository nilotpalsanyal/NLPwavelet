Wobj <- Wave(left = channel)
Wobj
x
x <- seq(0, 2*pi, length = 44100)
channel <- round(32000 * sin(440 * x))
Wobj <- Wave(left = channel)
Wobj
names(Wobj)
methods (Wobj)
methods(Wobj)
Wave
showMethods(Wave)
showMethods(Wave)
left(Wobj)
as.list(Wobj)
Wave
attr("Wobj",list)
attr("Wobj")
attr(Wobj)
attr(Wobj,"left")
attr(Wobj,"samp.rate")
attr(Wobj,"right")
attributes(Wobj)
install.packages("Rmusic")
devtools::install_github("keithmcnulty/Rmusic", build_vignettes = TRUE)
install.packages("devtools")
devtools::install_github("keithmcnulty/Rmusic", build_vignettes = TRUE)
library(Rmusic)
?Rmusic
??Rmusic
shiny::runApp("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Conferences : Talks : Presentations/Science Fair, April 2024 (El Paso Convention Center)/test/test.R")
shiny::runApp("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Conferences : Talks : Presentations/Science Fair, April 2024 (El Paso Convention Center)/test/test.R")
shiny::runApp("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Conferences : Talks : Presentations/Science Fair, April 2024 (El Paso Convention Center)/app/face.R")
a = read.csv("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/02. Spring 2024/STAT 4329:5329:6329/HW/HW9data.csv")
table(a$country)
table(a$medicines)
table(a$illness_history)
348.75-190
rm(list=ls())
#### Simulate Latent class compering risk data
set.seed(1)
N = 500  # number of subjects
L = 2  # number of latent groups
p = 2 # number of covariates
K = 2 # number of competing risks
Z = cbind(rbinom(N,1,0.5),runif(N)) # covariate matrix
Z_tilde = cbind(rep(1,N),Z)
## Generate class indicators xi
alpha = cbind(rep(0,3),c(2,-4,0))
exp.lpred = exp(Z_tilde %*% alpha)
p_latent = exp.lpred/rowSums(exp.lpred) # matrix with prob. of each subject belonging to each class
xi = t(sapply(1:N,function(i) rmultinom(1, 1, p_latent[i,])))
## Generate time-to-event T
eta = cbind(c(0, -3,   0.5,  0, 6), c(0, -2,  0.4, 0, 4)) # one column for each competing risk
w_func = function(l,z,L){
p = length(z)
if(l==1){
return(c(z,rep(0,(p+1)*(L-1))))
} else{
e_lminus1 = rep(0,L-1)
e_lminus1[l-1] = 1
return(c(z, e_lminus1 %x% c(1,z) ))
}
}
W = array(0,dim=c(N,L,L*K + (L-1)))  #number of columns in w = L*K + (L-1)
for(i in 1:N)
for(l in 1:L){
W[i,l,] <- w_func(l,Z[i,],L)
}  # dim(W) = 500   2   5
lambda0_func = function(t){   # Assume \lambda_0(t)=0.1*e^{-t}
0.1 * exp(-t)
}
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * W[i,1,] %*% eta[,1]}, c(0,Inf) )
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * W[i,2,] %*% eta[,2]}, c(0,Inf) )
}
i
?uniroot
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * W[i,1,] %*% eta[,1]}, c(0,10^10) )
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * W[i,2,] %*% eta[,2]}, c(0,10^10) )
}
f
f <- function(t) { log(u) - 0.1 * (1-exp(-t)) - t * W[i,1,] %*% eta[,1] }
f(0)
f(10^10)
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^10) )
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^10) )
}
f <- function(t) { as.numeric(log(u) - 0.1 * (1-exp(-t)) - t * W[i,1,] %*% eta[,1]) }
f(0)
f(10^10)
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^3) )
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^3) )
}
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^3) )
}
f = function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}
f(0)
f(1000)
f(10000)
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )
}
warnings()
uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^4) )$root
}
i
uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
t1vec[i]
uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^4) )$root
uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^5) )$root
f = function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}
f(0)
f(10^4)
f(10^5)
f(10^10)
f(-1)
f(-2)
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,-10^4) )$root
}
t1vec
t2vec
rang(t1vec)
rang(t1vec)
range(t1vec)
range(t2vec)
dim(W)
W[,2,]
W[,2,]
W[,1,]
ta
eta
for(i in 1:N){
# u = runif(1)
# t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
# u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^4) )$root
}
for(i in 1:N){
# u = runif(1)
# t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
# u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,2])}, c(0,10^4) )$root
}
t2vec
W[,1,]
W[,2,]
Z
Z_tilde
alpha
xi
eta
W
dim(W)
range(W)
Z
W
i
Z[i,]
unique(W)
unique(c(W))
for(i in 1:N) print(as.numeric(W[i,2,] %*% eta[,2]))
t2vec = c()
for(i in 1:N){
# u = runif(1)
# t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^2) )$root
}
eta
w_func = function(l,z,L){
p = length(z)
if(l==1){
return(c(z,rep(0,(p+1)*(L-1))))
} else{
e_lminus1 = rep(0,L-1)
e_lminus1[l-1] = 1
return(c(z, e_lminus1 %x% c(1,z) ))
}
}
W = array(0,dim=c(N,L,L*K + (L-1)))  #number of columns in w = L*K + (L-1)
for(i in 1:N)
for(l in 1:L){
W[i,l,] <- w_func(l,Z[i,],L)
}  # dim(W) = 500   2   5
lambda0_func = function(t){   # Assume \lambda_0(t)=0.1*e^{-t}
0.1 * exp(-t)
}
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^2) )$root
}
t1vec
i
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^4) )$root
}
i
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
}
t1vec
range(t1vec)
W[,1,]
W[,2,]
eta
eta = cbind(c(0, -3,   0.5,  0, 3), c(0, -2,  0.4, 0, 2)) # one column for each competing risk
for(i in 1:N){
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) - 0.1 * (1-exp(-t)) - t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^4) )$root
}
i
W[1,2,]
W[1,1,]
curve(log(u) - 0.1 * (1 - exp(-x)) - x * as.numeric(W[i,2,] %*% eta[,2]), from=0, to=100)
curve(log(u) - 0.1 * (1 - exp(-x)) - x * as.numeric(W[i,1,] %*% eta[,1]), from=0, to=100)
curve(log(u) - 0.1 * (1 - exp(-x)), from=0, to=100)
curve(log(runif(1)) - 0.1 * (1 - exp(-x)), from=0, to=100)
curve(log(runif(1)) - 0.1 * (1 - exp(-x)), from=0, to=100)
curve(log(runif(1)) - 0.1 * (1 - exp(-x)), from=0, to=100)
curve(log(runif(1)) - 0.1 * (1 - exp(-x)), from=0, to=1000)
0.1 * (1 - exp(-(0:1000)))
0.1 * (1 - exp(-(0:100)))
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^2) )$root
}
i
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^4) )$root
}
i
curve(log(runif(1)) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,1,] %*% eta[,1]), 0, 10)
curve(log(runif(1)) + 0.1 * (1-exp(-x)) + t * as.numeric(W[i,1,] %*% eta[,1]), 0, 10)
curve(log(runif(1)) + 0.1 * (1-exp(-x)) + x * as.numeric(W[i,1,] %*% eta[,1]), 0, 10)
curve(log(runif(1)) + 0.1 * (1-exp(-x)) + x * as.numeric(W[i,1,] %*% eta[,1]), 0, 10)
curve(0.1 * (1-exp(-x)) + t * as.numeric(W[i,1,] %*% eta[,1]), 0, 10)
curve(0.1 * (1-exp(-x)) + x * as.numeric(W[i,1,] %*% eta[,1]), 0, 10)
W[i,1,] %*% eta[,1]
as.numeric(W[i,1,] %*% eta[,1])
eta = cbind(c(0, 2,   0.5,  0, 3), c(0, 2,  0.4, 0, 4)) # one column for each competing risk
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^2) )$root
}
i
eta = cbind(c(0, 2,   0.5,  0, 3), c(0, 2,  0.4, 0, 4)) # one column for each competing risk
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^3) )$root
}
t1vec
range(t1vec)
w_func = function(l,z,L){
p = length(z)
for(i in 1:N){
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^3) )$root
}
for(i in 1:N){
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^3) )$root
}
range(t2vec)
range(t1vec)
range(t2vec)
eta
rexp(N,2)
range(rexp(N,2))
range(rexp(N,4))
range(rexp(N,6))
range(rexp(N,1))
range(rexp(N,0.5))
range(rexp(N,0.25))
plot(t1vec,type="l")
range(rexp(N,0.1))
?rexp
tvec = min(min(t1vec,t2vec),censvec)
censvec = rexp(N,rate=0.1) #censored observations occur on average once every 10 units of time
tvec = min(min(t1vec,t2vec),censvec)
tvec
tvec = pmin(pmin(t1vec,t2vec),censvec)
tvec
range(tvec)
time = pmin(pmin(t1vec,t2vec),censvec)
event = c()
for(i in 1:N){
if(t1vec[i]==time[i]) event[i]=1 else if(t2vec[i]==time[i]) event[i]=2 else event[i]=0
}
time
event
table(event)
censvec = rexp(N,rate=0.2) #censored observations occur on average once every 5 units of time
time = pmin(pmin(t1vec,t2vec),censvec)
event = c()
for(i in 1:N){
if(t1vec[i]==time[i]) event[i]=1 else if(t2vec[i]==time[i]) event[i]=2 else event[i]=0
}
table(event)
length(time)
length(unique(time))
alpha
xi
jitter
jitter(xi)
?jitter
xi
dim(xi)
length(xi)
range(jitter(xi))
Ehat_xi = xi + runif(length(xi),0,0.2)
Ehat_xi
range(Ehat_xi)
time1 = time[event==1]
time2 = time[event==2]
time1
time2
rm(list=ls())
#### Simulate Latent class compering risk data
set.seed(1)
N = 500  # number of subjects
L = 2  # number of latent groups
p = 2 # number of covariates
K = 2 # number of competing risks
Z = cbind(rbinom(N,1,0.5),runif(N)) # covariate matrix
Z_tilde = cbind(rep(1,N),Z)
## Generate class indicators xi
alpha = cbind(rep(0,3),c(2,-4,0))
exp.lpred = exp(Z_tilde %*% alpha)
p_latent = exp.lpred/rowSums(exp.lpred) # matrix with prob. of each subject belonging to each class
xi = t(sapply(1:N,function(i) rmultinom(1, 1, p_latent[i,])))
## Generate time-to-event T
eta = cbind(c(0, 2,   0.5,  0, 3), c(0, 2,  0.4, 0, 4)) # one column for each competing risk
w_func = function(l,z,L){
p = length(z)
if(l==1){
return(c(z,rep(0,(p+1)*(L-1))))
} else{
e_lminus1 = rep(0,L-1)
e_lminus1[l-1] = 1
return(c(z, e_lminus1 %x% c(1,z) ))
}
}
W = array(0,dim=c(N,L,L*K + (L-1)))  #number of columns in w = L*K + (L-1)
for(i in 1:N)
for(l in 1:L){
W[i,l,] <- w_func(l,Z[i,],L)
}  # dim(W) = 500   2   5
lambda0_func = function(t){   # Assume \lambda_0(t)=0.1*e^{-t}
0.1 * exp(-t)
}
t1vec = t2vec = c()
for(i in 1:N){
u = runif(1)
t1vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,1,] %*% eta[,1])}, c(0,10^3) )$root
}
for(i in 1:N){
u = runif(1)
t2vec[i] = uniroot( function(t){log(u) + 0.1 * (1-exp(-t)) + t * as.numeric(W[i,2,] %*% eta[,2])}, c(0,10^3) )$root
}
censvec = rexp(N,rate=0.2) #censored observations occur on average once every 5 units of time
time = pmin(pmin(t1vec,t2vec),censvec)
event = c()
for(i in 1:N){
if(t1vec[i]==time[i]) event[i]=1 else if(t2vec[i]==time[i]) event[i]=2 else event[i]=0
}
#  0   1   2
# 43  99 358
## Initialize
eta0 = matrix(0.5,nrow=nrow(eta),ncol=ncol(eta))
alpha0 = matrix(0.5,nrow=nrow(alpha),ncol=ncol(alpha))
perturb_binary_matrix <- function(mat, strength = 0.1) {
# Check if input matrix rows sum to 1
if (!all.equal(rowSums(mat), rep(1, nrow(mat)))) {
stop("Each row of the input matrix must sum to 1.")
}
# Add random noise and normalize rows
perturbed <- mat + matrix(runif(length(mat), -strength, strength), nrow = nrow(mat))
# Ensure no element is negative
perturbed <- pmax(perturbed, 0)
# Normalize each row to sum to 1
perturbed <- t(apply(perturbed, 1, function(row) row / sum(row)))
return(perturbed)
}
Ehat_xi = perturb_binary_matrix(xi)
time1 = sort(time[event==1])
time2 = sort(time[event==2])
time12 = sort(time[event!=0])
auxfunc = function(x){
LHS = 0
for(l in 1:L){
idx = which(time==time1[q])
LHS = LHS + Ehat_xi[idx,l] * (x + sum(eta0[,1] * W[idx,1,]))^(-1)
}
RHS = length(which(time12>=time1[q]))
LHS-RHS
}
curve(auxfunc,c(-100,100))
time1
q=1\
q=1
curve(auxfunc,c(-100,100))
k
uniroot(auxfunc,c(0,10))
curve(auxfunc,c(-1000,1000))
curve(auxfunc+500,c(-1000,1000))
curve(auxfunc,c(-100,100))
curve(auxfunc,c(-100,1000))
curve(auxfunc,-100,100)
data()
PlantGrowth
WorldPhones
faithful
Boston
library(MASS)
Boston
Boston
?Boston
dim(Boston)
summary(Boston)
?read.csv
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
library(rmarkdown)
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Various Notes/Copulas/Copula.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Various Notes/Copulas/Copula.rmd")
install.packages(c("copula","VineCopula"))
install.packages(c("copBasic","cort","spcopula","bayescopula","bayesDccGarch","bCopula"))
version
install.packages(c("copula","VineCopula","copBasic","cort","spcopula","bayescopula","bayesDccGarch","bCopula"))
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Various Notes/Copulas/Copula.rmd")
install.packages("GMCM")
install.packages("GMCM")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Various Notes/Copulas/Copula.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Various Notes/Copulas/Copula.rmd")
install.packages("wavethresh")
setwd("/Users/nsanyal/Dropbox/Statistics/Research_Nil/Project-08A-NLPM/R_package_NLPwavelet/Version_1.0/NLPwavelet")
devtools::check()
install.packages("devtools")
devtools::check()
install.packages("V8")
install.packages("pandoc")
data(MASS::Boston)
library(MASS)
Boston
li <- list()
li[[1]] <- Boston[Boston$crim<1,]
li
li[[2]] <- Boston[Boston$crim >= 1 & Boston$crim < 10,]
li[[3]] <- Boston[Boston$crim >= 10,]
for(i in 1:3)
print(mean(li[[i]]$medv))
?read.csv
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2_solutions.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2_solutions.rmd")
render("/Users/nsanyal/Dropbox/Statistics/Research_Nil/UTEP/Teaching/04. Spring 2025 (current)/STAT 4329:5329:6329 (Statistical Programming)/HW/HW2_grading.rmd")
