// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// doublefact
double doublefact(int x);
RcppExport SEXP _NLPwavelet_doublefact(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(doublefact(x));
    return rcpp_result_gen;
END_RCPP
}
// M1_func
double M1_func(int r, double d, double tau1_l, double sigmasq);
RcppExport SEXP _NLPwavelet_M1_func(SEXP rSEXP, SEXP dSEXP, SEXP tau1_lSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type tau1_l(tau1_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(M1_func(r, d, tau1_l, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// M2_func
double M2_func(int r, double d, double tau1_l, double sigmasq);
RcppExport SEXP _NLPwavelet_M2_func(SEXP rSEXP, SEXP dSEXP, SEXP tau1_lSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type tau1_l(tau1_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(M2_func(r, d, tau1_l, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// h_func
double h_func(double x, double d, double nu, double tau2_l, double sigmasq);
RcppExport SEXP _NLPwavelet_h_func(SEXP xSEXP, SEXP dSEXP, SEXP nuSEXP, SEXP tau2_lSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau2_l(tau2_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(h_func(x, d, nu, tau2_l, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// L_func
double L_func(double x, double d, double nu, double tau2_l, double sigmasq);
RcppExport SEXP _NLPwavelet_L_func(SEXP xSEXP, SEXP dSEXP, SEXP nuSEXP, SEXP tau2_lSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau2_l(tau2_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(L_func(x, d, nu, tau2_l, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// L_dd_func
double L_dd_func(double x, double nu, double tau2_l, double sigmasq);
RcppExport SEXP _NLPwavelet_L_dd_func(SEXP xSEXP, SEXP nuSEXP, SEXP tau2_lSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau2_l(tau2_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(L_dd_func(x, nu, tau2_l, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// Lap_approx
Rcpp::List Lap_approx(double d, double nu, double tau2_l, double sigmasq);
RcppExport SEXP _NLPwavelet_Lap_approx(SEXP dSEXP, SEXP nuSEXP, SEXP tau2_lSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau2_l(tau2_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(Lap_approx(d, nu, tau2_l, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// lhood_contrib
double lhood_contrib(double d, int r, double nu, double M1, double gamma1_l, double gamma2_l, double tau1_l, double tau2_l, double sigmasq, double d_star, double sigma_star);
RcppExport SEXP _NLPwavelet_lhood_contrib(SEXP dSEXP, SEXP rSEXP, SEXP nuSEXP, SEXP M1SEXP, SEXP gamma1_lSEXP, SEXP gamma2_lSEXP, SEXP tau1_lSEXP, SEXP tau2_lSEXP, SEXP sigmasqSEXP, SEXP d_starSEXP, SEXP sigma_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma1_l(gamma1_lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma2_l(gamma2_lSEXP);
    Rcpp::traits::input_parameter< double >::type tau1_l(tau1_lSEXP);
    Rcpp::traits::input_parameter< double >::type tau2_l(tau2_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< double >::type d_star(d_starSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_star(sigma_starSEXP);
    rcpp_result_gen = Rcpp::wrap(lhood_contrib(d, r, nu, M1, gamma1_l, gamma2_l, tau1_l, tau2_l, sigmasq, d_star, sigma_star));
    return rcpp_result_gen;
END_RCPP
}
// post_odds_func
Rcpp::List post_odds_func(double d, int r, double nu, double M1, double sigmasq, double gamma1_l, double gamma2_l, double tau1_l, double tau2_l, double d_star, double sigma_star);
RcppExport SEXP _NLPwavelet_post_odds_func(SEXP dSEXP, SEXP rSEXP, SEXP nuSEXP, SEXP M1SEXP, SEXP sigmasqSEXP, SEXP gamma1_lSEXP, SEXP gamma2_lSEXP, SEXP tau1_lSEXP, SEXP tau2_lSEXP, SEXP d_starSEXP, SEXP sigma_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< double >::type gamma1_l(gamma1_lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma2_l(gamma2_lSEXP);
    Rcpp::traits::input_parameter< double >::type tau1_l(tau1_lSEXP);
    Rcpp::traits::input_parameter< double >::type tau2_l(tau2_lSEXP);
    Rcpp::traits::input_parameter< double >::type d_star(d_starSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_star(sigma_starSEXP);
    rcpp_result_gen = Rcpp::wrap(post_odds_func(d, r, nu, M1, sigmasq, gamma1_l, gamma2_l, tau1_l, tau2_l, d_star, sigma_star));
    return rcpp_result_gen;
END_RCPP
}
// post_mixprobs_func
Rcpp::List post_mixprobs_func(Rcpp::List post_odds);
RcppExport SEXP _NLPwavelet_post_mixprobs_func(SEXP post_oddsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type post_odds(post_oddsSEXP);
    rcpp_result_gen = Rcpp::wrap(post_mixprobs_func(post_odds));
    return rcpp_result_gen;
END_RCPP
}
// post_odds_func_indiv
double post_odds_func_indiv(std::string method, double d, double r, double M1, double sigmasq, double gamma_l, double tau_l, Rcpp::Nullable<double> d_star, Rcpp::Nullable<double> sigma_star);
RcppExport SEXP _NLPwavelet_post_odds_func_indiv(SEXP methodSEXP, SEXP dSEXP, SEXP rSEXP, SEXP M1SEXP, SEXP sigmasqSEXP, SEXP gamma_lSEXP, SEXP tau_lSEXP, SEXP d_starSEXP, SEXP sigma_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< double >::type tau_l(tau_lSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type d_star(d_starSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type sigma_star(sigma_starSEXP);
    rcpp_result_gen = Rcpp::wrap(post_odds_func_indiv(method, d, r, M1, sigmasq, gamma_l, tau_l, d_star, sigma_star));
    return rcpp_result_gen;
END_RCPP
}
// lhood_contrib_indiv
double lhood_contrib_indiv(std::string method, double d, double r, double M1, double gamma_l, double tau_l, double sigmasq, Rcpp::Nullable<double> d_star, Rcpp::Nullable<double> sigma_star);
RcppExport SEXP _NLPwavelet_lhood_contrib_indiv(SEXP methodSEXP, SEXP dSEXP, SEXP rSEXP, SEXP M1SEXP, SEXP gamma_lSEXP, SEXP tau_lSEXP, SEXP sigmasqSEXP, SEXP d_starSEXP, SEXP sigma_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< double >::type tau_l(tau_lSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type d_star(d_starSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type sigma_star(sigma_starSEXP);
    rcpp_result_gen = Rcpp::wrap(lhood_contrib_indiv(method, d, r, M1, gamma_l, tau_l, sigmasq, d_star, sigma_star));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NLPwavelet_doublefact", (DL_FUNC) &_NLPwavelet_doublefact, 1},
    {"_NLPwavelet_M1_func", (DL_FUNC) &_NLPwavelet_M1_func, 4},
    {"_NLPwavelet_M2_func", (DL_FUNC) &_NLPwavelet_M2_func, 4},
    {"_NLPwavelet_h_func", (DL_FUNC) &_NLPwavelet_h_func, 5},
    {"_NLPwavelet_L_func", (DL_FUNC) &_NLPwavelet_L_func, 5},
    {"_NLPwavelet_L_dd_func", (DL_FUNC) &_NLPwavelet_L_dd_func, 4},
    {"_NLPwavelet_Lap_approx", (DL_FUNC) &_NLPwavelet_Lap_approx, 4},
    {"_NLPwavelet_lhood_contrib", (DL_FUNC) &_NLPwavelet_lhood_contrib, 11},
    {"_NLPwavelet_post_odds_func", (DL_FUNC) &_NLPwavelet_post_odds_func, 11},
    {"_NLPwavelet_post_mixprobs_func", (DL_FUNC) &_NLPwavelet_post_mixprobs_func, 1},
    {"_NLPwavelet_post_odds_func_indiv", (DL_FUNC) &_NLPwavelet_post_odds_func_indiv, 9},
    {"_NLPwavelet_lhood_contrib_indiv", (DL_FUNC) &_NLPwavelet_lhood_contrib_indiv, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_NLPwavelet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
